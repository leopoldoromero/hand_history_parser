# name: Deploy Images to GHCR

# permissions:
#   packages: write

# on:
#   push:
#     branches:
#       - master
#   workflow_dispatch:

# jobs:
#   docker-build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: 'Checkout GitHub Action'
#         uses: actions/checkout@v3

#       - name: 'Login to GitHub Container Registry'
#         uses: docker/login-action@v2
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}
      
#       - name: 'Build and Push Docker Image'
#         run: |
#           docker build . \
#             --tag ghcr.io/${{ github.repository_owner }}/hand_history_parser:latest
#           docker push ghcr.io/${{ github.repository_owner }}/hand_history_parser:latest

#       - name: 'Deploy to instance'
#         run: |
#           eval $(ssh-agent -s)
#           echo "${{ secrets.DEPLOY_KEY }}" | ssh-add -
#           ssh -o StrictHostKeyChecking=no -t ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "bash ${{ secrets.DEPLOY_FOLDER }}/${{ secrets.DEPLOY_SCRIPT_SH }}"

name: Deploy to AWS Lambda

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract version from pyproject.toml
        id: version
        run: echo "VERSION=$(sed -n 's/^version = \"\([^"]*\)\"/\1/p' pyproject.toml)" >> .env

      - name: Export version
        run: cat .env
      
      - name: Debug Environment Variables
        run: printenv

      - name: Authenticate Docker to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL
      
      - name: Save credentials
        run: echo "$AWS_ECR_URL" > credentials

      - name: Upload environment file
        uses: actions/upload-artifact@v3
        with:
          name: env-file
          path: .env

  build:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Download environment file
        uses: actions/download-artifact@v3
        with:
          name: env-file

      - name: Load environment variables
        run: source .env

      - name: Build Docker image
        run: docker build -t $TAG .
        env:
          TAG: hand-replayer-api:${{ env.ENVIRONMENT }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}

      - name: Tag Docker image
        run: docker tag $TAG $AWS_ECR_URL/$TAG
        env:
          TAG: hand-replayer-api:${{ env.ENVIRONMENT }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

      - name: Push Docker image to ECR
        run: docker push $AWS_ECR_URL/$TAG
        env:
          TAG: hand-replayer-api:${{ env.ENVIRONMENT }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load environment variables
        run: source .env

      - name: Update AWS Lambda function code
        run: |
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $AWS_ECR_URL/$TAG | jq 'if .Environment? then .Environment.Variables = "REDACTED" else . end'
          aws lambda wait function-updated --function-name $FUNCTION_NAME
        env:
          FUNCTION_NAME: ${{ secrets.FUNCTION_NAME }}
          TAG: hand-replayer-api:${{ env.ENVIRONMENT }}-${{ steps.version.outputs.VERSION }}-${{ github.sha }}
          AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}

      - name: Update AWS Lambda function configuration
        run: |
          aws lambda update-function-configuration --function-name $FUNCTION_NAME --environment "Variables={}" | jq 'if .Environment? then .Environment.Variables = "REDACTED" else . end'
        env:
          FUNCTION_NAME: ${{ secrets.FUNCTION_NAME }}
