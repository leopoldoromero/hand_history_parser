name: Deploy to AWS Lambda

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ECR_URL: ${{ secrets.AWS_ECR_URL }}
  ENVIRONMENT: prod
  FUNCTION_NAME: ${{ secrets.FUNCTION_NAME }}
  MONGODB_URL: ${{ secrets.MONGODB_URL }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract version from pyproject.toml
        id: version
        run: echo "VERSION=$(sed -n 's/^version = \"\([^"]*\)\"/\1/p' pyproject.toml)" >> .env

      - name: Debug FUNCTION_NAME (safe)
        run: echo "FUNCTION_NAME starts with ${FUNCTION_NAME:0:10}"

      - name: Create Tag
        run: |
          TAG=${ENVIRONMENT}-$(sed -n 's/^version = \"\([^"]*\)\"/\1/p' pyproject.toml)-${GITHUB_SHA}
          echo "TAG=$TAG" >> .env

      - name: Export variables to env-file
        run: cp .env env-file

      - name: Export version and tag
        run: cat env-file

      - name: Upload environment file
        uses: actions/upload-artifact@v4
        with:
          name: env-file
          path: env-file
          if-no-files-found: error

  build-and-push:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y git

      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: env-file
          path: .

      - name: Recreate .env from env-file
        run: mv env-file .env

      - name: Load environment variables
        run: |
          source .env
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Authenticate Docker to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL

      - name: Build Docker image
        run: docker build -t $TAG .

      - name: Tag Docker image
        run: docker tag $TAG $AWS_ECR_URL:$TAG

      - name: Push Docker image to ECR
        run: docker push $AWS_ECR_URL:$TAG



  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download environment file
        uses: actions/download-artifact@v4
        with:
          name: env-file
          path: .

      - name: Recreate .env from env-file
        run: mv env-file .env

      - name: Load environment variables
        run: |
          source .env
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Authenticate Docker to AWS ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_URL

      - name: Update AWS Lambda function code
        run: |
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $AWS_ECR_URL:$TAG| jq 'if .Environment? then .Environment.Variables = "REDACTED" else . end'
          aws lambda wait function-updated --function-name $FUNCTION_NAME

      - name: Update AWS Lambda function configuration
        run: |
          aws lambda update-function-configuration --function-name $FUNCTION_NAME --environment "Variables={MONGODB_URL=$MONGODB_URL}" | jq 'if .Environment? then .Environment.Variables = "REDACTED" else . end'

